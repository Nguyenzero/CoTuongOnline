package Controller;

import Client.GameClient;
import Dao.QuickMatchDAO;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;
import javafx.util.Duration;

import java.sql.Connection;
import java.sql.DriverManager;

public class HomeController {

    @FXML private Label lblUsername;
    @FXML private Label lblTotalGames;
    @FXML private Label lblWins;
    @FXML private Label lblDraws;
    @FXML private Label lblPoints;
    @FXML private Label lblRank;

    @FXML private TextField txtMessage;  // √¥ nh·∫≠p chat
    @FXML private Button btnSend;        // n√∫t g·ª≠i chat

    private String currentUser;
    private GameClient gameClient;

    private Timeline timeline;
    private Alert waitingAlert;
    private boolean isWaiting = false;

    @FXML private TextArea txtChat;  // √¥ hi·ªÉn th·ªã chat

    // üëá k·∫øt n·ªëi server ngay khi m·ªü Home ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn ƒë·∫ßu ti√™n
    @FXML
    private void initialize() {
        try {
            if (gameClient == null) {
                gameClient = new GameClient("localhost", 12345);
            }
            gameClient.setChatListener(this::onChat);
            gameClient.startListening();
            if (currentUser != null && !currentUser.isEmpty()) {
                gameClient.identify(currentUser);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // G·ªçi t·ª´ ngo√†i ƒë·ªÉ truy·ªÅn client v√†o
    public void setGameClient(GameClient client) {
        this.gameClient = client;

        // üëá l·∫Øng nghe chat t·ª´ GameClient
        client.setChatListener(this::onChat);

        // üëá ƒë·∫£m b·∫£o c√≥ lu·ªìng ƒë·ªçc ƒë·ªÉ nh·∫≠n CHAT/PM
        client.startListening();

        // g√°n s·ª± ki·ªán n√∫t g·ª≠i (n·∫øu ƒë√£ set qua FXML th√¨ v·∫´n ok v√¨ g·ªçi c√πng 1 h√†m)
        btnSend.setOnAction(e -> onChatSend());

        // üëá g·ª≠i danh t√≠nh n·∫øu ƒë√£ c√≥ user
        if (currentUser != null && !currentUser.isEmpty()) {
            client.identify(currentUser);
        }
    }


    // khi ·∫•n n√∫t g·ª≠i
    @FXML
    private void onChat(ActionEvent e) {
        onChatSend();
    }

    private void onChatSend() {
        String text = txtMessage.getText().trim();
        if (text.isEmpty()) return;

        try {
            // üëá t·∫°o client n·∫øu ch∆∞a ƒë∆∞·ª£c truy·ªÅn v√†o
            if (gameClient == null) {
                gameClient = new GameClient("localhost", 12345);
                gameClient.setChatListener(this::onChat);
                gameClient.startListening(); // c·∫ßn thi·∫øt v√¨ constructor kh√¥ng t·ª± start n·ªØa
                if (currentUser != null && !currentUser.isEmpty()) {
                    gameClient.identify(currentUser);
                }
            }

            // üëâ n·∫øu v√¨ l√Ω do n√†o ƒë√≥ ch∆∞a l·∫Øng nghe, echo c·ª•c b·ªô ƒë·ªÉ kh√¥ng ‚Äúm·∫•t‚Äù tin ƒë·∫ßu ti√™n
            if (!gameClient.isListening()) {
                String local;
                if (text.startsWith("/")) {
                    int idx = text.indexOf(' ');
                    if (idx > 1) {
                        String target = text.substring(1, idx);
                        String body = text.substring(idx + 1);
                        local = "üîí B·∫°n ‚ûú " + target + ": " + body;
                    } else {
                        local = "üîí " + text;
                    }
                } else {
                    String name = (currentUser == null || currentUser.isEmpty()) ? "B·∫°n" : currentUser;
                    local = name + ": " + text;
                }
                onChat(local);
            }

            // g·ª≠i qua server
            gameClient.sendChat(text);
            txtMessage.clear();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    // hi·ªán tin nh·∫Øn l√™n TextArea
    public void onChat(String message) {
        txtChat.appendText(message + "\n");
    }

    public void setUsername(String username) {
        currentUser = username;
        lblUsername.setText(username);
        // üëâ ƒë·∫£m b·∫£o server bi·∫øt t√™n ng∆∞·ªùi d√πng
        if (gameClient != null) {
            gameClient.identify(username);
        }
    }

    public void loadStats(String username) {
        lblTotalGames.setText("S·ªë v√°n: 10");
        lblWins.setText("Th·∫Øng: 5");
        lblDraws.setText("H√≤a: 2");
        lblPoints.setText("ƒêi·ªÉm: 1200");
        lblRank.setText("H·∫°ng: 15");
    }

    // X·ª≠ l√Ω khi nh·∫•n n√∫t "Ch∆°i nhanh"
    @FXML
    private void playQuick() {
     QuickMatchDAO dao = new QuickMatchDAO();

        try {
            String opponent = dao.tryMatchOrEnqueue(currentUser);

            if (opponent != null) {
                openBoard(currentUser, opponent);
                return;
            }

            // Ch∆∞a c√≥ ai -> hi·ªÉn th·ªã dialog ch·ªù
            isWaiting = true;
            waitingAlert = new Alert(Alert.AlertType.INFORMATION);
            waitingAlert.setTitle("Gh√©p ph√≤ng");
            waitingAlert.setHeaderText(null);
            waitingAlert.setContentText("ƒêang t√¨m ph√≤ng, vui l√≤ng ch·ªù...");
            ButtonType stopType = new ButtonType("D·ª´ng");
            waitingAlert.getButtonTypes().setAll(stopType);
            waitingAlert.show();

            Node stopBtn = waitingAlert.getDialogPane().lookupButton(stopType);
            stopBtn.addEventFilter(ActionEvent.ACTION, ev -> {
                dao.cancelWaiting(currentUser);
                isWaiting = false;
                if (timeline != null) timeline.stop();
                waitingAlert.close();
                ev.consume();
            });

            // Ki·ªÉm tra ƒë·ªãnh k·ª≥ ƒë·ªëi th·ªß
            timeline = new Timeline(new KeyFrame(Duration.seconds(2), ev -> {
                try {
                    String foundOpponent = dao.getOpponent(currentUser);
                    if (foundOpponent != null) {
                        if (waitingAlert != null) waitingAlert.close();
                        isWaiting = false;
                        timeline.stop();
                        openBoard(currentUser, foundOpponent);
                    }
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }));
            timeline.setCycleCount(Timeline.INDEFINITE);
            timeline.play();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }




    // Khi nh·∫•n "T·∫°o ph√≤ng"
    @FXML
    private void openCreateRoom() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/View/CreateRoom.fxml"));
            Parent root = loader.load();

            // L·∫•y controller c·ªßa CreateRoom
            CreateRoomController controller = loader.getController();
            controller.setCurrentUser(currentUser); // ‚úÖ Truy·ªÅn user v√†o

            Stage stage = new Stage();
            stage.setTitle("T·∫°o ph√≤ng");
            stage.setScene(new Scene(root));
            stage.show();

            // ƒê√≥ng Home n·∫øu mu·ªën
            Stage currentStage = (Stage) lblUsername.getScene().getWindow();
            currentStage.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    // Khi nh·∫•n "V√†o ph√≤ng"
    @FXML
    private void openRoomList() {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/View/RoomList.fxml"));
            Parent root = loader.load();

            // L·∫•y controller c·ªßa RoomList
            RoomListController controller = loader.getController();
            controller.setCurrentUser(currentUser); // ‚úÖ Truy·ªÅn user v√†o

            Stage stage = new Stage();
            stage.setTitle("Danh s√°ch ph√≤ng");
            stage.setScene(new Scene(root));
            stage.show();

            // ƒê√≥ng Home n·∫øu mu·ªën
            Stage currentStage = (Stage) lblUsername.getScene().getWindow();
            currentStage.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }



    // H√†m m·ªü b√†n c·ªù
    private void openBoard(String player1, String player2) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/View/board.fxml"));
            Parent root = loader.load();

            // ‚úÖ Truy·ªÅn user sang BoardController
            BoardController boardController = loader.getController();
            boardController.setCurrentUser(currentUser);


            Stage stage = new Stage();
            stage.setTitle("V√°n c·ªù - " + player1 + " vs " + player2);
            stage.setScene(new Scene(root));
            stage.show();

            // ƒê√≥ng trang Home hi·ªán t·∫°i
            Stage currentStage = (Stage) lblUsername.getScene().getWindow();
            currentStage.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }





    // Method to set the current user
    public void setCurrentUser(String username) {
        this.currentUser = username;
        lblUsername.setText( username);
        System.out.println("Current user set to: " + username);
        // üëá th√¥ng b√°o cho server ƒë·ªÉ chat ri√™ng ho·∫°t ƒë·ªông b·∫±ng t√™n ng∆∞·ªùi d√πng
        if (gameClient != null) {
            gameClient.identify(username);
        }
    }

    // ƒêƒÉng xu·∫•t -> quay v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
    @FXML
    private void logout() {
        try {
            QuickMatchDAO dao = new QuickMatchDAO();

            // H·ªßy tr·∫°ng th√°i ch·ªù gh√©p (n·∫øu c√≥)
            if (isWaiting) {
                try {
                    dao.cancelWaiting(currentUser);
                } catch (Exception ignored) {}
                isWaiting = false;
            }

            // D·ª´ng ki·ªÉm tra gh√©p c·∫∑p
            if (timeline != null) timeline.stop();
            if (waitingAlert != null) waitingAlert.close();

            // X√≥a user hi·ªán t·∫°i
            currentUser = null;

            // Chuy·ªÉn v·ªÅ Login.fxml tr√™n c√πng Stage
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/View/LoginRegister.fxml"));
            Parent root = loader.load();
            Stage stage = (Stage) lblUsername.getScene().getWindow();
            stage.setTitle("ƒêƒÉng nh·∫≠p");
            stage.setScene(new Scene(root));
            stage.show();

            System.out.println("‚úÖ ƒêƒÉng xu·∫•t th√†nh c√¥ng, ƒë√£ h·ªßy tr·∫°ng th√°i ch·ªù tr√™n Firebase!");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

}